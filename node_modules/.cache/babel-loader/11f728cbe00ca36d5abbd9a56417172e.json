{"ast":null,"code":"if (typeof module !== 'undefined' && typeof exports !== 'undefined') {\n  module.exports = OAuth;\n}\n/**\n * Constructor\n * @param {Object} opts consumer key and secret\n */\n\n\nfunction OAuth(opts) {\n  if (!(this instanceof OAuth)) {\n    return new OAuth(opts);\n  }\n\n  if (!opts) {\n    opts = {};\n  }\n\n  if (!opts.consumer) {\n    throw new Error('consumer option is required');\n  }\n\n  this.consumer = opts.consumer;\n  this.nonce_length = opts.nonce_length || 32;\n  this.version = opts.version || '1.0';\n  this.parameter_seperator = opts.parameter_seperator || ', ';\n  this.realm = opts.realm;\n\n  if (typeof opts.last_ampersand === 'undefined') {\n    this.last_ampersand = true;\n  } else {\n    this.last_ampersand = opts.last_ampersand;\n  } // default signature_method is 'PLAINTEXT'\n\n\n  this.signature_method = opts.signature_method || 'PLAINTEXT';\n\n  if (this.signature_method == 'PLAINTEXT' && !opts.hash_function) {\n    opts.hash_function = function (base_string, key) {\n      return key;\n    };\n  }\n\n  if (!opts.hash_function) {\n    throw new Error('hash_function option is required');\n  }\n\n  this.hash_function = opts.hash_function;\n  this.body_hash_function = opts.body_hash_function || this.hash_function;\n}\n/**\n * OAuth request authorize\n * @param  {Object} request data\n * {\n *     method,\n *     url,\n *     data\n * }\n * @param  {Object} key and secret token\n * @return {Object} OAuth Authorized data\n */\n\n\nOAuth.prototype.authorize = function (request, token) {\n  var oauth_data = {\n    oauth_consumer_key: this.consumer.key,\n    oauth_nonce: this.getNonce(),\n    oauth_signature_method: this.signature_method,\n    oauth_timestamp: this.getTimeStamp(),\n    oauth_version: this.version\n  };\n\n  if (!token) {\n    token = {};\n  }\n\n  if (token.key !== undefined) {\n    oauth_data.oauth_token = token.key;\n  }\n\n  if (!request.data) {\n    request.data = {};\n  }\n\n  if (request.includeBodyHash) {\n    oauth_data.oauth_body_hash = this.getBodyHash(request, token.secret);\n  }\n\n  oauth_data.oauth_signature = this.getSignature(request, token.secret, oauth_data);\n  return oauth_data;\n};\n/**\n * Create a OAuth Signature\n * @param  {Object} request data\n * @param  {Object} token_secret key and secret token\n * @param  {Object} oauth_data   OAuth data\n * @return {String} Signature\n */\n\n\nOAuth.prototype.getSignature = function (request, token_secret, oauth_data) {\n  return this.hash_function(this.getBaseString(request, oauth_data), this.getSigningKey(token_secret));\n};\n/**\n * Create a OAuth Body Hash\n * @param {Object} request data\n */\n\n\nOAuth.prototype.getBodyHash = function (request, token_secret) {\n  var body = typeof request.data === 'string' ? request.data : JSON.stringify(request.data);\n\n  if (!this.body_hash_function) {\n    throw new Error('body_hash_function option is required');\n  }\n\n  return this.body_hash_function(body, this.getSigningKey(token_secret));\n};\n/**\n * Base String = Method + Base Url + ParameterString\n * @param  {Object} request data\n * @param  {Object} OAuth data\n * @return {String} Base String\n */\n\n\nOAuth.prototype.getBaseString = function (request, oauth_data) {\n  return request.method.toUpperCase() + '&' + this.percentEncode(this.getBaseUrl(request.url)) + '&' + this.percentEncode(this.getParameterString(request, oauth_data));\n};\n/**\n * Get data from url\n * -> merge with oauth data\n * -> percent encode key & value\n * -> sort\n *\n * @param  {Object} request data\n * @param  {Object} OAuth data\n * @return {Object} Parameter string data\n */\n\n\nOAuth.prototype.getParameterString = function (request, oauth_data) {\n  var base_string_data;\n\n  if (oauth_data.oauth_body_hash) {\n    base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.deParamUrl(request.url))));\n  } else {\n    base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.mergeObject(request.data, this.deParamUrl(request.url)))));\n  }\n\n  var data_str = ''; //base_string_data to string\n\n  for (var i = 0; i < base_string_data.length; i++) {\n    var key = base_string_data[i].key;\n    var value = base_string_data[i].value; // check if the value is an array\n    // this means that this key has multiple values\n\n    if (value && Array.isArray(value)) {\n      // sort the array first\n      value.sort();\n      var valString = \"\"; // serialize all values for this key: e.g. formkey=formvalue1&formkey=formvalue2\n\n      value.forEach(function (item, i) {\n        valString += key + '=' + item;\n\n        if (i < value.length) {\n          valString += \"&\";\n        }\n      }.bind(this));\n      data_str += valString;\n    } else {\n      data_str += key + '=' + value + '&';\n    }\n  } //remove the last character\n\n\n  data_str = data_str.substr(0, data_str.length - 1);\n  return data_str;\n};\n/**\n * Create a Signing Key\n * @param  {String} token_secret Secret Token\n * @return {String} Signing Key\n */\n\n\nOAuth.prototype.getSigningKey = function (token_secret) {\n  token_secret = token_secret || '';\n\n  if (!this.last_ampersand && !token_secret) {\n    return this.percentEncode(this.consumer.secret);\n  }\n\n  return this.percentEncode(this.consumer.secret) + '&' + this.percentEncode(token_secret);\n};\n/**\n * Get base url\n * @param  {String} url\n * @return {String}\n */\n\n\nOAuth.prototype.getBaseUrl = function (url) {\n  return url.split('?')[0];\n};\n/**\n * Get data from String\n * @param  {String} string\n * @return {Object}\n */\n\n\nOAuth.prototype.deParam = function (string) {\n  var arr = string.split('&');\n  var data = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    var item = arr[i].split('='); // '' value\n\n    item[1] = item[1] || ''; // check if the key already exists\n    // this can occur if the QS part of the url contains duplicate keys like this: ?formkey=formvalue1&formkey=formvalue2\n\n    if (data[item[0]]) {\n      // the key exists already\n      if (!Array.isArray(data[item[0]])) {\n        // replace the value with an array containing the already present value\n        data[item[0]] = [data[item[0]]];\n      } // and add the new found value to it\n\n\n      data[item[0]].push(decodeURIComponent(item[1]));\n    } else {\n      // it doesn't exist, just put the found value in the data object\n      data[item[0]] = decodeURIComponent(item[1]);\n    }\n  }\n\n  return data;\n};\n/**\n * Get data from url\n * @param  {String} url\n * @return {Object}\n */\n\n\nOAuth.prototype.deParamUrl = function (url) {\n  var tmp = url.split('?');\n  if (tmp.length === 1) return {};\n  return this.deParam(tmp[1]);\n};\n/**\n * Percent Encode\n * @param  {String} str\n * @return {String} percent encoded string\n */\n\n\nOAuth.prototype.percentEncode = function (str) {\n  return encodeURIComponent(str).replace(/\\!/g, \"%21\").replace(/\\*/g, \"%2A\").replace(/\\'/g, \"%27\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\");\n};\n/**\n * Percent Encode Object\n * @param  {Object} data\n * @return {Object} percent encoded data\n */\n\n\nOAuth.prototype.percentEncodeData = function (data) {\n  var result = {};\n\n  for (var key in data) {\n    var value = data[key]; // check if the value is an array\n\n    if (value && Array.isArray(value)) {\n      var newValue = []; // percentEncode every value\n\n      value.forEach(function (val) {\n        newValue.push(this.percentEncode(val));\n      }.bind(this));\n      value = newValue;\n    } else {\n      value = this.percentEncode(value);\n    }\n\n    result[this.percentEncode(key)] = value;\n  }\n\n  return result;\n};\n/**\n * Get OAuth data as Header\n * @param  {Object} oauth_data\n * @return {String} Header data key - value\n */\n\n\nOAuth.prototype.toHeader = function (oauth_data) {\n  var sorted = this.sortObject(oauth_data);\n  var header_value = 'OAuth ';\n\n  if (this.realm) {\n    header_value += 'realm=\"' + this.realm + '\"' + this.parameter_seperator;\n  }\n\n  for (var i = 0; i < sorted.length; i++) {\n    if (sorted[i].key.indexOf('oauth_') !== 0) continue;\n    header_value += this.percentEncode(sorted[i].key) + '=\"' + this.percentEncode(sorted[i].value) + '\"' + this.parameter_seperator;\n  }\n\n  return {\n    Authorization: header_value.substr(0, header_value.length - this.parameter_seperator.length) //cut the last chars\n\n  };\n};\n/**\n * Create a random word characters string with input length\n * @return {String} a random word characters string\n */\n\n\nOAuth.prototype.getNonce = function () {\n  var word_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  var result = '';\n\n  for (var i = 0; i < this.nonce_length; i++) {\n    result += word_characters[parseInt(Math.random() * word_characters.length, 10)];\n  }\n\n  return result;\n};\n/**\n * Get Current Unix TimeStamp\n * @return {Int} current unix timestamp\n */\n\n\nOAuth.prototype.getTimeStamp = function () {\n  return parseInt(new Date().getTime() / 1000, 10);\n}; ////////////////////// HELPER FUNCTIONS //////////////////////\n\n/**\n * Merge object\n * @param  {Object} obj1\n * @param  {Object} obj2\n * @return {Object}\n */\n\n\nOAuth.prototype.mergeObject = function (obj1, obj2) {\n  obj1 = obj1 || {};\n  obj2 = obj2 || {};\n  var merged_obj = obj1;\n\n  for (var key in obj2) {\n    merged_obj[key] = obj2[key];\n  }\n\n  return merged_obj;\n};\n/**\n * Sort object by key\n * @param  {Object} data\n * @return {Array} sorted array\n */\n\n\nOAuth.prototype.sortObject = function (data) {\n  var keys = Object.keys(data);\n  var result = [];\n  keys.sort();\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    result.push({\n      key: key,\n      value: data[key]\n    });\n  }\n\n  return result;\n};","map":{"version":3,"sources":["C:/Users/stoce/Documents/GitHub/touristos/node_modules/oauth-1.0a/oauth-1.0a.js"],"names":["module","exports","OAuth","opts","consumer","Error","nonce_length","version","parameter_seperator","realm","last_ampersand","signature_method","hash_function","base_string","key","body_hash_function","prototype","authorize","request","token","oauth_data","oauth_consumer_key","oauth_nonce","getNonce","oauth_signature_method","oauth_timestamp","getTimeStamp","oauth_version","undefined","oauth_token","data","includeBodyHash","oauth_body_hash","getBodyHash","secret","oauth_signature","getSignature","token_secret","getBaseString","getSigningKey","body","JSON","stringify","method","toUpperCase","percentEncode","getBaseUrl","url","getParameterString","base_string_data","sortObject","percentEncodeData","mergeObject","deParamUrl","data_str","i","length","value","Array","isArray","sort","valString","forEach","item","bind","substr","split","deParam","string","arr","push","decodeURIComponent","tmp","str","encodeURIComponent","replace","result","newValue","val","toHeader","sorted","header_value","indexOf","Authorization","word_characters","parseInt","Math","random","Date","getTime","obj1","obj2","merged_obj","keys","Object"],"mappings":"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","sourcesContent":["if (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined') {\n    module.exports = OAuth;\n}\n\n/**\n * Constructor\n * @param {Object} opts consumer key and secret\n */\nfunction OAuth(opts) {\n    if(!(this instanceof OAuth)) {\n        return new OAuth(opts);\n    }\n\n    if(!opts) {\n        opts = {};\n    }\n\n    if(!opts.consumer) {\n        throw new Error('consumer option is required');\n    }\n\n    this.consumer            = opts.consumer;\n    this.nonce_length        = opts.nonce_length || 32;\n    this.version             = opts.version || '1.0';\n    this.parameter_seperator = opts.parameter_seperator || ', ';\n    this.realm               = opts.realm;\n\n    if(typeof opts.last_ampersand === 'undefined') {\n        this.last_ampersand = true;\n    } else {\n        this.last_ampersand = opts.last_ampersand;\n    }\n\n    // default signature_method is 'PLAINTEXT'\n    this.signature_method = opts.signature_method || 'PLAINTEXT';\n\n    if(this.signature_method == 'PLAINTEXT' && !opts.hash_function) {\n        opts.hash_function = function(base_string, key) {\n            return key;\n        }\n    }\n\n    if(!opts.hash_function) {\n        throw new Error('hash_function option is required');\n    }\n\n    this.hash_function = opts.hash_function;\n    this.body_hash_function = opts.body_hash_function || this.hash_function;\n}\n\n/**\n * OAuth request authorize\n * @param  {Object} request data\n * {\n *     method,\n *     url,\n *     data\n * }\n * @param  {Object} key and secret token\n * @return {Object} OAuth Authorized data\n */\nOAuth.prototype.authorize = function(request, token) {\n    var oauth_data = {\n        oauth_consumer_key: this.consumer.key,\n        oauth_nonce: this.getNonce(),\n        oauth_signature_method: this.signature_method,\n        oauth_timestamp: this.getTimeStamp(),\n        oauth_version: this.version\n    };\n\n    if(!token) {\n        token = {};\n    }\n\n    if(token.key !== undefined) {\n        oauth_data.oauth_token = token.key;\n    }\n\n    if(!request.data) {\n        request.data = {};\n    }\n\n    if(request.includeBodyHash) {\n      oauth_data.oauth_body_hash = this.getBodyHash(request, token.secret)\n    }\n\n    oauth_data.oauth_signature = this.getSignature(request, token.secret, oauth_data);\n\n    return oauth_data;\n};\n\n/**\n * Create a OAuth Signature\n * @param  {Object} request data\n * @param  {Object} token_secret key and secret token\n * @param  {Object} oauth_data   OAuth data\n * @return {String} Signature\n */\nOAuth.prototype.getSignature = function(request, token_secret, oauth_data) {\n    return this.hash_function(this.getBaseString(request, oauth_data), this.getSigningKey(token_secret));\n};\n\n/**\n * Create a OAuth Body Hash\n * @param {Object} request data\n */\nOAuth.prototype.getBodyHash = function(request, token_secret) {\n  var body = typeof request.data === 'string' ? request.data : JSON.stringify(request.data)\n\n  if (!this.body_hash_function) {\n    throw new Error('body_hash_function option is required');\n  }\n\n  return this.body_hash_function(body, this.getSigningKey(token_secret))\n};\n\n/**\n * Base String = Method + Base Url + ParameterString\n * @param  {Object} request data\n * @param  {Object} OAuth data\n * @return {String} Base String\n */\nOAuth.prototype.getBaseString = function(request, oauth_data) {\n    return request.method.toUpperCase() + '&' + this.percentEncode(this.getBaseUrl(request.url)) + '&' + this.percentEncode(this.getParameterString(request, oauth_data));\n};\n\n/**\n * Get data from url\n * -> merge with oauth data\n * -> percent encode key & value\n * -> sort\n *\n * @param  {Object} request data\n * @param  {Object} OAuth data\n * @return {Object} Parameter string data\n */\nOAuth.prototype.getParameterString = function(request, oauth_data) {\n    var base_string_data;\n    if (oauth_data.oauth_body_hash) {\n        base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.deParamUrl(request.url))));\n    } else {\n        base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.mergeObject(request.data, this.deParamUrl(request.url)))));\n    }\n\n    var data_str = '';\n\n    //base_string_data to string\n    for(var i = 0; i < base_string_data.length; i++) {\n        var key = base_string_data[i].key;\n        var value = base_string_data[i].value;\n        // check if the value is an array\n        // this means that this key has multiple values\n        if (value && Array.isArray(value)){\n          // sort the array first\n          value.sort();\n\n          var valString = \"\";\n          // serialize all values for this key: e.g. formkey=formvalue1&formkey=formvalue2\n          value.forEach((function(item, i){\n            valString += key + '=' + item;\n            if (i < value.length){\n              valString += \"&\";\n            }\n          }).bind(this));\n          data_str += valString;\n        } else {\n          data_str += key + '=' + value + '&';\n        }\n    }\n\n    //remove the last character\n    data_str = data_str.substr(0, data_str.length - 1);\n    return data_str;\n};\n\n/**\n * Create a Signing Key\n * @param  {String} token_secret Secret Token\n * @return {String} Signing Key\n */\nOAuth.prototype.getSigningKey = function(token_secret) {\n    token_secret = token_secret || '';\n\n    if(!this.last_ampersand && !token_secret) {\n        return this.percentEncode(this.consumer.secret);\n    }\n\n    return this.percentEncode(this.consumer.secret) + '&' + this.percentEncode(token_secret);\n};\n\n/**\n * Get base url\n * @param  {String} url\n * @return {String}\n */\nOAuth.prototype.getBaseUrl = function(url) {\n    return url.split('?')[0];\n};\n\n/**\n * Get data from String\n * @param  {String} string\n * @return {Object}\n */\nOAuth.prototype.deParam = function(string) {\n    var arr = string.split('&');\n    var data = {};\n\n    for(var i = 0; i < arr.length; i++) {\n        var item = arr[i].split('=');\n\n        // '' value\n        item[1] = item[1] || '';\n\n        // check if the key already exists\n        // this can occur if the QS part of the url contains duplicate keys like this: ?formkey=formvalue1&formkey=formvalue2\n        if (data[item[0]]){\n          // the key exists already\n          if (!Array.isArray(data[item[0]])) {\n            // replace the value with an array containing the already present value\n            data[item[0]] = [data[item[0]]];\n          }\n          // and add the new found value to it\n          data[item[0]].push(decodeURIComponent(item[1]));\n        } else {\n          // it doesn't exist, just put the found value in the data object\n          data[item[0]] = decodeURIComponent(item[1]);\n        }\n    }\n\n    return data;\n};\n\n/**\n * Get data from url\n * @param  {String} url\n * @return {Object}\n */\nOAuth.prototype.deParamUrl = function(url) {\n    var tmp = url.split('?');\n\n    if (tmp.length === 1)\n        return {};\n\n    return this.deParam(tmp[1]);\n};\n\n/**\n * Percent Encode\n * @param  {String} str\n * @return {String} percent encoded string\n */\nOAuth.prototype.percentEncode = function(str) {\n    return encodeURIComponent(str)\n        .replace(/\\!/g, \"%21\")\n        .replace(/\\*/g, \"%2A\")\n        .replace(/\\'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\");\n};\n\n/**\n * Percent Encode Object\n * @param  {Object} data\n * @return {Object} percent encoded data\n */\nOAuth.prototype.percentEncodeData = function(data) {\n    var result = {};\n\n    for(var key in data) {\n        var value = data[key];\n        // check if the value is an array\n        if (value && Array.isArray(value)){\n          var newValue = [];\n          // percentEncode every value\n          value.forEach((function(val){\n            newValue.push(this.percentEncode(val));\n          }).bind(this));\n          value = newValue;\n        } else {\n          value = this.percentEncode(value);\n        }\n        result[this.percentEncode(key)] = value;\n    }\n\n    return result;\n};\n\n/**\n * Get OAuth data as Header\n * @param  {Object} oauth_data\n * @return {String} Header data key - value\n */\nOAuth.prototype.toHeader = function(oauth_data) {\n    var sorted = this.sortObject(oauth_data);\n\n    var header_value = 'OAuth ';\n\n    if (this.realm) {\n        header_value += 'realm=\"' + this.realm + '\"' + this.parameter_seperator;\n    }\n\n    for(var i = 0; i < sorted.length; i++) {\n        if (sorted[i].key.indexOf('oauth_') !== 0)\n            continue;\n\n        header_value += this.percentEncode(sorted[i].key) + '=\"' + this.percentEncode(sorted[i].value) + '\"' + this.parameter_seperator;\n    }\n\n    return {\n        Authorization: header_value.substr(0, header_value.length - this.parameter_seperator.length) //cut the last chars\n    };\n};\n\n/**\n * Create a random word characters string with input length\n * @return {String} a random word characters string\n */\nOAuth.prototype.getNonce = function() {\n    var word_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    var result = '';\n\n    for(var i = 0; i < this.nonce_length; i++) {\n        result += word_characters[parseInt(Math.random() * word_characters.length, 10)];\n    }\n\n    return result;\n};\n\n/**\n * Get Current Unix TimeStamp\n * @return {Int} current unix timestamp\n */\nOAuth.prototype.getTimeStamp = function() {\n    return parseInt(new Date().getTime()/1000, 10);\n};\n\n////////////////////// HELPER FUNCTIONS //////////////////////\n\n/**\n * Merge object\n * @param  {Object} obj1\n * @param  {Object} obj2\n * @return {Object}\n */\nOAuth.prototype.mergeObject = function(obj1, obj2) {\n    obj1 = obj1 || {};\n    obj2 = obj2 || {};\n\n    var merged_obj = obj1;\n    for(var key in obj2) {\n        merged_obj[key] = obj2[key];\n    }\n    return merged_obj;\n};\n\n/**\n * Sort object by key\n * @param  {Object} data\n * @return {Array} sorted array\n */\nOAuth.prototype.sortObject = function(data) {\n    var keys = Object.keys(data);\n    var result = [];\n\n    keys.sort();\n\n    for(var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        result.push({\n            key: key,\n            value: data[key],\n        });\n    }\n\n    return result;\n};\n"]},"metadata":{},"sourceType":"script"}